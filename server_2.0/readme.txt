Это файлы сервера. Для начала список файлов:
defines_s.h - набор #define команд для определения констант (номера ошибок, сообщений и ролей). Такой же файл должен быть и в клиенте.

systemfunctions_s.h/systemfunctions_s.cpp - некоторые функции, необходимые для работы. В том числе важная zeroMemSys - функция очищения памяти в массиве,
которая опирается на операционную систему

include_s.h и RolesInclude.h - файлы, подключающие несколько других заголовочных файлов. include_s.h подключает winsock2, а RolesInclude.h - все файлы 
с ролями в игре

Структура программы:
программа имеет 2 синглтона - NetWorker и GameManager. NetWorker отвечает за передачу пакетов, а GameManager - за события в игре.
Файлы заголовков и реализации - NetWorker_s.h, NetWorker_s.cpp, gamemanager.h, gamemanager.cpp
Файлы синглтонов - singletonGM.h и singletonNW.h

некоторые функции стоит запускать во втором потоке. Если это так, то в файле с реализацией этой функции при ней будет комментарий //run in another thread

Client.h - структура клиента. Такие клиенты хранятся в NetWorker для общения с ними. В struct Client хранится базовая информация

Теперь роли:
Каждая роль - класс, который наследуется от абстрактного класса IRole (IRole.h), соответственно должна реализовывать функции этого класса (см IRole.h)
Такие роли - Civillian, MafiaR [Тут есть R, чтобы отличить класс роли от пространства имен], NoneRole - пустая роль, созданная для ошибок 
и неинициализированных ролей

Соответственно, каждый игрок - это экземпляр класса, наследованного от IRole.

GameManager работает с массивом IRole*, в котором и хранятся все игроки и их состояния.

У класса IRole, помимо очевидных функций типа bool alive() есть еще такие функции:
void nightWork() - это метод, который происходит ночью. Что этот персонаж делает ночью. Метод вызывается тогда, когда персонаж просыпается. 
(мирные как бы просыпаются и сразу засыпают)

canSpeakNow(), canListenNow(), setCanSpeakNow(), setCanListenNow() - это функции для работы с разрешениями для этого игрока - может ли он сейчас говорить 
и может ли он смотреть

Теперь о том, как все работает:

NetWorker:
для того, чтобы связаться с netWorker, вам надо:
	отправить сообщение с запросом на вход в комнату
	получить от сервера подтверждение (в сообщении придет либо roomId, либо придет сообщение об ошибке)
	далее вы можете отправлять серверу сообщения
	каждые 5 секунд сервер отправляет всем клиентам сообщение для подтверждения, что они online, клиенты ему отвечают (это все автоматически)
типы сообщений можно посмотреть в defines_s.h - они все с подписью MESSAGE_ID

сами функции вроде подписаны комментариями о том, что они делают

GameManager:

при инициализации создает заодно и NetWorker, работает с игроками, управляет игрой. В нем есть методы, которые отвечают за стадии игры, но они пока не готовы
Важная функция в GameManager - _setRolesCount, которая строит массив с количеством игроков каждой роли в зависимости от количества игроков. 
Эту функцию еще надо дописать, надо всем ее обсудить
